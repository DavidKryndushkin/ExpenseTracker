  #Завдання на розробку об'єктно-орієнтованого програмного забезпечення (ООП) на мові Python, що передбачає створення CLI-додатку трекера витрат зі збереженням даних у файлі протоколом pickle та аналізом витрат/доходів за місяцями:
#Розробити клас Transaction, який буде представляти окрему транзакцію (витрату або дохід) з такими атрибутами:
#amount (float): сума транзакції.

#category (str): категорія транзакції.

#date (str): дата транзакції у форматі "РРРР-ММ-ДД".

#Розробити клас ExpenseTracker, який буде відповідати за управління трекером витрат. Він повинен мати такі методи:
#add_transaction(transaction: Transaction): додати нову транзакцію до трекера.

#remove_transaction(transaction: Transaction): видалити задану транзакцію з трекера.

#get_total_expenses() -> float: отримати загальну суму витрат.

#get_total_income() -> float: отримати загальну суму доходів.

#get_expenses_by_month(month: str) -> float: отримати суму витрат за заданий місяць.

#get_income_by_month(month: str) -> float: отримати суму доходів за заданий місяць.

#Розробити клас ExpenseTrackerApp, який буде представляти CLI-додаток трекера витрат. Він повинен мати такі методи:
#run(): запустити додаток та почати інтерактивний режим.

#load_data(file_path: str): завантажити дані про транзакції з файлу.

#save_data(file_path: str): зберегти дані про транзакції до файлу.

#Реалізувати функціональність додатку, де користувач може вводити команди для додавання/видалення транзакцій, отримання загальної суми витрат/доходів та отримання суми витрат/доходів за певний місяць.

#Забезпечити збереження даних про транзакції у файл за допомогою модуля pickle. При запуску додатку, перевірити, чи є збережений файл з даними, та завантажити їх, якщо вони існують.

#Реалізувати можливість виконання аналізу витрат/доходів за місяцями, шляхом обчислення суми транзакцій, які відповідають певному місяцю.

#Забезпечити зручний та зрозумілий інтерфейс для користувача, який дозволяє взаємодіяти з трекером витрат через команди та отримувати звіти про витрати/доходи за місяцями.

#Передбачити обробку помилок та виведення корисних повідомлень для користувача у випадку некоректних вхідних даних чи помилок виконання.

#Запрограмувати опцію вихідного пункту меню для користувача, що дозволяє зберегти дані та завершити роботу додатку.

#Забезпечити достатнє тестування програми, щоб переконатись у правильності її роботи та забезпечити надійність функцій трекера витрат.
import pickle
import datetime

class Transaction:
    def __init__(self, amount, category, date):
        self.amount = amount
        self.category = category
        self.date = date

class ExpenseTracker:
    def __init__(self):
        self.transactions = []

    def add_transaction(self, transaction):
        self.transactions.append(transaction)

    def remove_transaction(self, transaction):
        self.transactions.remove(transaction)

    def get_total_expenses(self):
        total_expenses = 0
        for transaction in self.transactions:
            if transaction.amount < 0:
                total_expenses += transaction.amount
        return total_expenses

    def get_total_income(self):
        total_income = 0
        for transaction in self.transactions:
            if transaction.amount > 0:
                total_income += transaction.amount
        return total_income

    def get_expenses_by_month(self, month):
        expenses = 0
        for transaction in self.transactions:
            if transaction.amount < 0 and transaction.date.month == month:
                expenses += abs(transaction.amount)
        return expenses

    def get_income_by_month(self, month):
        income = 0
        for transaction in self.transactions:
            if transaction.amount > 0 and transaction.date.month == month:
                income += transaction.amount
        return income

class ExpenseTrackerApp:
    def __init__(self):
        self.tracker = ExpenseTracker()

    def run(self):
        while True:
            command = input("Enter a command: ")
            if command == "add":
                amount = float(input("Enter the amount: "))
                category = input("Enter the category: ")
                date = input("Enter the date (YYYY-MM-DD): ")
                date = datetime.datetime.strptime(date, "%Y-%m-%d")
                transaction = Transaction(amount, category, date)
                self.tracker.add_transaction(transaction)
                print("Transaction added.")
            elif command == "remove":
                amount = float(input("Enter the amount: "))
                category = input("Enter the category: ")
                date = input("Enter the date (YYYY-MM-DD): ")
                date = datetime.datetime.strptime(date, "%Y-%m-%d")
                transaction = Transaction(amount, category, date)
                self.tracker.remove_transaction(transaction)
            elif command == "total_expenses":
                total_expenses = self.tracker.get_total_expenses()
                print("Total expenses:", total_expenses)
            elif command == "total_income":
                total_income = self.tracker.get_total_income()
                print("Total income:", total_income)
            elif command == "expenses_by_month":
                month = int(input("Enter the month: "))
                expenses = self.tracker.get_expenses_by_month(month)
                print("Expenses for month", month, ":", expenses)
            elif command == "income_by_month":
                month = int(input("Enter the month: "))
                income = self.tracker.get_income_by_month(month)
                print("Income for month", month, ":", income)
            elif command == "save":
                file_path = input("Enter the file path: ")
                self.save_data(file_path)
                print("Data saved.")
            elif command == "load":
                file_path = input("Enter the file path: ")
                self.load_data(file_path)
                print("Data loaded.")
            elif command == "help":
                self.print_help()
            elif command == "exit":
                break
            else:
                print("Invalid command.")

    def print_help(self):
        print("Available commands:")
        print("add - Add a new transaction")
        print("remove - Remove a transaction")
        print("total_expenses - Get total expenses")
        print("total_income - Get total income")
        print("expenses_by_month - Get expenses for a specific month")
        print("income_by_month - Get income for a specific month")
        print("save - Save data")
        print("load - Load data")
        print("help - Print this help message")
        print("exit - Save data and exit the app")

    def save_data(self, file_path):
        try:
            with open(file_path, "wb") as file:
                pickle.dump(self.tracker.transactions, file)
        except FileNotFoundError:
            print("File not found.")
        except pickle.PickleError:
            print("Error occurred while saving data.")

    def load_data(self, file_path):
        try:
            with open(file_path, "rb") as file:
                self.tracker.transactions = pickle.load(file)
        except FileNotFoundError:
            print("File not found.")
        except pickle.PickleError:
            print("Error occurred while loading data.")

if __name__ == '__main__':
    app = ExpenseTrackerApp()
    app.run()
