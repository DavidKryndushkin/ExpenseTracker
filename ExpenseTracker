  #Завдання на розробку об'єктно-орієнтованого програмного забезпечення (ООП) на мові Python, що передбачає створення CLI-додатку трекера витрат зі збереженням даних у файлі протоколом pickle та аналізом витрат/доходів за місяцями:
#Розробити клас Transaction, який буде представляти окрему транзакцію (витрату або дохід) з такими атрибутами:
#amount (float): сума транзакції.

#category (str): категорія транзакції.

#date (str): дата транзакції у форматі "РРРР-ММ-ДД".

#Розробити клас ExpenseTracker, який буде відповідати за управління трекером витрат. Він повинен мати такі методи:
#add_transaction(transaction: Transaction): додати нову транзакцію до трекера.

#remove_transaction(transaction: Transaction): видалити задану транзакцію з трекера.

#get_total_expenses() -> float: отримати загальну суму витрат.

#get_total_income() -> float: отримати загальну суму доходів.

#get_expenses_by_month(month: str) -> float: отримати суму витрат за заданий місяць.

#get_income_by_month(month: str) -> float: отримати суму доходів за заданий місяць.

#Розробити клас ExpenseTrackerApp, який буде представляти CLI-додаток трекера витрат. Він повинен мати такі методи:
#run(): запустити додаток та почати інтерактивний режим.

#load_data(file_path: str): завантажити дані про транзакції з файлу.

#save_data(file_path: str): зберегти дані про транзакції до файлу.

#Реалізувати функціональність додатку, де користувач може вводити команди для додавання/видалення транзакцій, отримання загальної суми витрат/доходів та отримання суми витрат/доходів за певний місяць.

#Забезпечити збереження даних про транзакції у файл за допомогою модуля pickle. При запуску додатку, перевірити, чи є збережений файл з даними, та завантажити їх, якщо вони існують.

#Реалізувати можливість виконання аналізу витрат/доходів за місяцями, шляхом обчислення суми транзакцій, які відповідають певному місяцю.

#Забезпечити зручний та зрозумілий інтерфейс для користувача, який дозволяє взаємодіяти з трекером витрат через команди та отримувати звіти про витрати/доходи за місяцями.

#Передбачити обробку помилок та виведення корисних повідомлень для користувача у випадку некоректних вхідних даних чи помилок виконання.

#Запрограмувати опцію вихідного пункту меню для користувача, що дозволяє зберегти дані та завершити роботу додатку.

#Забезпечити достатнє тестування програми, щоб переконатись у правильності її роботи та забезпечити надійність функцій трекера витрат.

import pickle
import os

class Transaction:
    def __init__(self, amount: float, category: str, date: str):
        self.amount = amount
        self.category = category
        self.date = date


class ExpenseTracker:
    def __init__(self):
        self.transactions = []

    def add_transaction(self, transaction: Transaction):
        self.transactions.append(transaction)

    def remove_transaction(self, transaction: Transaction):
        self.transactions.remove(transaction)

    def get_total_expenses(self) -> float:
        return sum(transaction.amount for transaction in self.transactions if transaction.amount < 0)

    def get_total_income(self) -> float:
        return sum(transaction.amount for transaction in self.transactions if transaction.amount > 0)

    def get_expenses_by_month(self, month: str) -> float:
        return sum(transaction.amount for transaction in self.transactions if
                   transaction.amount < 0 and transaction.date.startswith(month))

    def get_income_by_month(self, month: str) -> float:
        return sum(transaction.amount for transaction in self.transactions if
                   transaction.amount > 0 and transaction.date.startswith(month))


class ExpenseTrackerApp:
    def __init__(self):
        self.tracker = ExpenseTracker()

    def run(self):
        self.load_data("transactions.pickle")

        while True:
            print("\nExpense Tracker App")
            print("1. Add Transaction")
            print("2. Remove Transaction")
            print("3. Get Total Expenses")
            print("4. Get Total Income")
            print("5. Get Expenses by Month")
            print("6. Get Income by Month")
            print("7. Save and Exit")

            choice = input("Enter your choice: ")

            if choice == "1":
                self.add_transaction()
            elif choice == "2":
                self.remove_transaction()
            elif choice == "3":
                print("Total Expenses:", self.tracker.get_total_expenses())
            elif choice == "4":
                print("Total Income:", self.tracker.get_total_income())
            elif choice == "5":
                self.get_expenses_by_month()
            elif choice == "6":
                self.get_income_by_month()
            elif choice == "7":
                self.save_data("transactions.pickle")
                break
            else:
                print("Invalid choice. Please try again.")

    def add_transaction(self):
        try:
            amount = float(input("Enter amount: "))
            category = input("Enter category: ")
            date = input("Enter date (YYYY-MM-DD): ")

            transaction = Transaction(amount, category, date)
            self.tracker.add_transaction(transaction)
            print("Transaction added successfully.")
        except ValueError:
            print("Invalid input. Please enter a valid number for amount.")

    def remove_transaction(self):
        try:
            amount = float(input("Enter amount of the transaction to remove: "))
            category = input("Enter category of the transaction to remove: ")
            date = input("Enter date of the transaction to remove (YYYY-MM-DD): ")

            transaction_to_remove = Transaction(amount, category, date)
            self.tracker.remove_transaction(transaction_to_remove)
            print("Transaction removed successfully.")
        except ValueError:
            print("Invalid input. Please enter a valid number for amount.")

    def get_expenses_by_month(self):
        month = input("Enter month (YYYY-MM): ")
        expenses = self.tracker.get_expenses_by_month(month)
        print("Expenses for {}:".format(month), expenses)

    def get_income_by_month(self):
        month = input("Enter month (YYYY-MM): ")
        income = self.tracker.get_income_by_month(month)
        print("Income for {}:".format(month), income)

    def load_data(self, file_path: str):
        if os.path.exists(file_path):
            with open(file_path, 'rb') as file:
                self.tracker = pickle.load(file)
                print("Data loaded successfully.")
        else:
            print("No data file found. Starting with an empty Expense Tracker.")

    def save_data(self, file_path: str):
        with open(file_path, 'wb') as file:
            pickle.dump(self.tracker, file)
            print("Data saved successfully.")


if __name__ == "__main__":
    app = ExpenseTrackerApp()
    app.run()



#1 Додати нову транзакцію: Введіть 1 та введіть суму, категорію та дату транзакції.
#2 Видалити транзакцію: Введіть 2 та введіть суму, категорію та дату транзакції для видалення.
#3 Отримати загальну суму витрат: Введіть 3.
#4 Отримати загальну суму доходів: Введіть 4.
#5 Отримати суму витрат за певний місяць: Введіть 5 та введіть місяць у форматі "РРРР-ММ".
#6 Отримати суму доходів за певний місяць: Введіть 6 та введіть місяць у форматі "РРРР-ММ".
#7 Зберегти дані та вийти: Введіть 7.
